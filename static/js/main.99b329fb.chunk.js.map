{"version":3,"sources":["components/SearchBar/SearchBar.js","apis/youtube.js","components/VideoItem/VideoItem.js","components/VideoList/VideoList.js","components/VideoDetails/VideoDetail.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","term","setTerm","error","setError","onInputChange","e","target","value","className","onSubmit","preventDefault","length","onFormSubmit","style","borderColor","onChange","type","color","axios","create","baseURL","VideoItem","video","onVideoSelect","onClick","src","snippet","thumbnails","medium","url","alt","title","VideoList","videos","renderedList","map","id","videoId","VideoDetail","console","log","videoSrc","description","App","setVideo","selectedVideo","setSelectedVideo","useEffect","onTermSubmit","a","youtube","get","params","part","maxResults","key","process","q","response","data","items","fetchImages","concat","dataLength","next","hasMore","loader","endMessage","textAlign","document","body","scrollTop","documentElement","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.99b329fb.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst SearchBar = (props) => {\n  const [term, setTerm] = useState('');\n  const [error, setError] = useState(false);\n\n  const onInputChange = (e) => {\n    setTerm(e.target.value);\n  };\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n\n    if (term.length >= 20) {\n      setError(true);\n      return;\n    } else {\n      props.onFormSubmit(term);\n      setTerm('');\n      setError(false);\n    }\n  };\n\n  return (\n    <div className=\"search-bar ui segment\">\n      <form onSubmit={onFormSubmit} className=\"ui form\">\n        {!error ? (\n          <div className=\"field\">\n            <label>Video search</label>\n            <input\n              className=\"input\"\n              onChange={onInputChange}\n              value={term}\n              type=\"text\"\n            />\n          </div>\n        ) : (\n          <div className=\"field\">\n            <label>Video search</label>\n            <input\n              style={{ borderColor: 'red' }}\n              className=\"input\"\n              onChange={onInputChange}\n              value={term}\n              type=\"text\"\n            />\n            <div style={{ color: 'red' }}>\n              Search input can't be longer than 20 characters\n            </div>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://www.googleapis.com/youtube/v3',\n});\n","import React from 'react';\nimport './VideoItem.scss';\n\nconst VideoItem = ({ video, onVideoSelect }) => {\n  return (\n    <div onClick={() => onVideoSelect(video)} className=\"item video-item\">\n      <img\n        className=\"ui image\"\n        src={video.snippet.thumbnails.medium.url}\n        alt={video.snippet.title}\n      />\n      <div className=\"content\">\n        <div className=\"header\">{video.snippet.title}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoItem;\n","import React from 'react';\nimport VideoItem from '../VideoItem/VideoItem';\n\nconst VideoList = ({ videos, onVideoSelect }) => {\n  const renderedList = videos.map((video) => {\n    return (\n      <VideoItem\n        key={video.id.videoId}\n        onVideoSelect={onVideoSelect}\n        video={video}\n      />\n    );\n  });\n\n  return <div className=\"ui relaxed divided list\">{renderedList}</div>;\n};\n\nexport default VideoList;\n","import React from 'react';\n\nconst VideoDetail = ({ video }) => {\n  if (!video) {\n    return <div>Loading...</div>;\n  }\n\n  console.log(video);\n\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\n  return (\n    <div>\n      <div className=\"ui embed\">\n        <iframe src={videoSrc} title=\"video player\" />\n      </div>\n      <div className=\"ui segment\">\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\n        <p>{video.snippet.description}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoDetail;\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport youtube from './apis/youtube.js';\nimport VideoList from './components/VideoList/VideoList';\nimport VideoDetail from './components/VideoDetails/VideoDetail';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nfunction App() {\n  const [video, setVideo] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState('');\n\n  useEffect(() => {\n    onTermSubmit('web development');\n  }, []);\n\n  const onTermSubmit = async (term) => {\n    const response = await youtube.get('/search', {\n      params: {\n        part: 'snippet',\n        maxResults: 20,\n        type: 'video',\n        key: process.env.REACT_APP_API_KEY,\n        q: term,\n      },\n    });\n\n    setVideo(response.data.items);\n\n    setSelectedVideo(response.data.items[0]);\n  };\n\n  const fetchImages = async (term) => {\n    const response = await youtube.get('/search', {\n      params: {\n        part: 'snippet',\n        maxResults: 20,\n        type: 'video',\n        key: process.env.REACT_APP_API_KEY,\n        q: term,\n      },\n    });\n\n    setVideo(video.concat(response.data.items));\n    setSelectedVideo(response.data.items[0]);\n  };\n\n  const onVideoSelect = (video) => {\n    setSelectedVideo(video);\n    document.body.scrollTop = 0;\n    document.documentElement.scrollTop = 0;\n  };\n\n  return (\n    <div className=\"container\">\n      <SearchBar onFormSubmit={onTermSubmit} />\n\n      <div className=\"grid\">\n        <div className=\"layout\">\n          <div className=\"preview-column\">\n            <VideoDetail video={selectedVideo} />\n          </div>\n          <div className=\"videos-column\">\n            <InfiniteScroll\n              dataLength={video.length}\n              next={fetchImages}\n              hasMore={true}\n              loader={<h4>Loading...</h4>}\n              endMessage={\n                <p style={{ textAlign: 'center' }}>\n                  <b>Yay! You have seen it all</b>\n                </p>\n              }\n            >\n              <VideoList onVideoSelect={onVideoSelect} videos={video} />\n            </InfiniteScroll>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}